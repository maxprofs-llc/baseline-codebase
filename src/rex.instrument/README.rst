********************************
REX.INSTRUMENT Programming Guide
********************************

.. contents:: Table of Contents


Overview
========

This package is responsible for two areas of functionality:

* Defining a basic set of class interfaces for building applications that
  make use of Electronic Data Capture (EDC) functionality such as Instruments,
  Assessments, and Tasks.
* Providing the base implementation of the `RIOS`_ specifications and model in
  the RexDB platform.

.. _`RIOS`: https://rios.readthedocs.org

This package is a part of the RexDB |R| platform for medical research data
management.  RexDB is free software created by Prometheus Research, LLC and is
released under the Apache v2 license with a commensurate attribution clause.  For
more information, please visit http://rexdb.org/.

The development of this product was supported by the National Institute of
Mental Health of the National Institutes of Health under Award Number
R43MH099826.

.. |R| unicode:: 0xAE .. registered trademark sign


Interface Classes
=================

``rex.instrument`` defines abstract classes for the following objects that make
up the core functionality of an EDC application on the RexDB platform. For more
details on any particular class, please read the API Reference documentation.

User
    This class represents the actual user who is interacting with the EDC
    application.

Subject
    This class represents the target of the Instrument/InstrumentVersion. It is
    the entity (person, place, thing, etc) that the data points defined in the
    Instrument/InstrumentVersion are being gathered about.

Instrument
    This class represents an Instrument. An Instrument is what defines the data
    points that should be collected about a Subject. Instruments are made up of
    one or more InstrumentVersions that contain the exact specifications of the
    data points as the Instrument evolves over time.

InstrumentVersion
    This class represents a specific version of an Instrument. It contains the
    Common Instrument Definition for the Instrument at a particular point in
    the Instrument's lifetime.

CalculationSet
    This class represents the Calculations configuration associated with a
    specific InstrumentVersion. It contains the Calculation Set Definition.

Assessment
    This class represents the data that has been collected to satisfy an
    InstrumentVersion.

ResultSet
    This class represents the data that is generated by the CalculationSet when
    applied to an Assessment.

Channel
    This class represents an Electronic Data Capture application for which a
    Instrument can be presented.

Task
    This class represents a requirement or check-list item for a Subject that
    tells the system to prompt the User to complete the specified Instrument.

Entry
    This class represents a preliminary or historical version of an Assessment
    that is used in a multiple-data-entry application to capture the separate
    instances of the data prior to reconcilation, or is used to record the
    previous revisions of an Assessment if it is modified after completion.

DraftInstrumentVersion
    This class represents a version of an Instrument that is in the process of
    being created. It is not available for use by the system to collect data
    until it is published.

DraftCalculationSet
    This class represents a version of a CalculationSet that is in the process
    of being created. It is not available for use by the system to collect data
    until it is published.


Settings
========

``rex.instrument`` provides the following settings:

``instrument_implementation``
    This setting is a record that allows applications to indicate which
    implementations of the ``rex.instrument`` class interfaces to use in their
    operation.

    This setting allows the following keys:

    * user
    * subject
    * instrument
    * instrumentversion
    * assessment
    * draftinstrumentversion
    * channel
    * task
    * entry
    * calculationset
    * resultset
    * draftcalculationset

    When a key is not specified, ``rex.instrument`` will use the ``top()``-most
    implementation that exists in the application instance.

``instrument_vaildate_on_startup``
    This setting governs whether or not the system will automatically validate
    all InstrumentVersion and CalculationSet definitions found in the datastore
    upon server startup. If not specified, it defaults to ``True``.

``instrument_default_required_entries``
    This setting controls internal workflow logic which requires that Tasks
    have at least some minimal number of Preliminary Entries completed before
    they can be reconciled/completed. This setting defaults to ``1`` and is
    only referenced if the Task implementation does not specify a value for its
    ``num_required_entries`` property.

``instrument_calculationmethod_default_module_list``
    This setting is a list that controls which Python standard modules are
    automatically imported and made available to Python calculation
    expressions. This setting defaults to a RIOS-compliant list of: ``re``,
    ``math``, ``cmath``, and ``datetime``.


Command Line Tools
==================

This package contains a series of command line tools (exposed via ``rex.ctl``):


instrument-retrieve
-------------------

This tool will retrieve a Common Instrument Definition from the datastore and
print it to standard out. You can use the ``--output`` option to send the
output to a file. The ``instrument-uid`` parameter is the Unique ID (UID) of
the Instrument to retrieve. By default, it will retrieve the latest version of
the Instrument, unless the ``--version`` option is used.

This tool requires that an implementation of the ``rex.instrument`` interfaces
be installed and referenced by the project or ``rex.yaml``.

::

  rex instrument-retrieve <instrument-uid>


instrument-store
----------------

This tool will store a Common Instrument Definition file to the datastore. The
``instrument-uid`` parameter is the UID to store the Instrument under (it can
be existing or new). The ``definition`` parameter is the path to a file
containing the Common Instrument Definition to store. By default, the defition
will be stored as a new version under the UID, unless the ``--version`` option
is used.

This tool requires that an implementation of the ``rex.instrument`` interfaces
be installed and referenced by the project or ``rex.yaml``.

::

  rex instrument-store <instrument-uid> <definition>


instrument-validate
-------------------

This tool will validate the structure of a definition file against the rules
and schema of the Common Instrument Definition format. The ``definition``
argument is the path to the file to validate.

::

  rex instrument-validate <definition>


instrument-format
-----------------

This tool will (re)format a definition according to the options you give it.
You can specify to output in either JSON or YAML, and whether or not the output
should be "prettified". The ``definition`` argument is the path to the file to
format.

::

    rex instrument-format <defintition>


calculationset-retrieve
-----------------------

This tool will retrieve a Calculation Set Definition from the datastore and
print it to standard out. You can use the ``--output`` option to send the
output to a file. The ``instrument-uid`` parameter is the Unique ID (UID) of
the Instrument the Definition is associated with. By default, it will retrieve
the latest version of the Instrument, unless the ``--version`` option is used.

This tool requires that an implementation of the ``rex.instrument`` interfaces
be installed and referenced by the project or ``rex.yaml``.

::

  rex calculationset-retrieve <instrument-uid>


calculationset-store
--------------------

This tool will store a Calculation Set Definition file to the datastore. The
``instrument-uid`` parameter is the UID of the Instrument to associate it with.
The ``definition`` parameter is the path to a file containing the Calculation
Set Definition to store. By default, the defition will be stored as a new
version under the UID, unless the ``--version`` option is used.

This tool requires that an implementation of the ``rex.instrument`` interfaces
be installed and referenced by the project or ``rex.yaml``.

::

  rex calculationset-store <instrument-uid> <definition>


calculationset-validate
-----------------------

This tool will validate the structure of a definition file against the rules
and schema of the Calculation Set Definition format. The ``definition``
argument is the path to the file to validate.

::

  rex calculationset-validate <definition>


calculationset-format
---------------------

This tool will (re)format a definition according to the options you give it.
You can specify to output in either JSON or YAML, and whether or not the output
should be "prettified". The ``definition`` argument is the path to the file to
format.

::

    rex calculationset-format <defintition>

